# from gen.txt
n = 158794636700752922781275926476194117856757725604680390949164778150869764326023702391967976086363365534718230514141547968577753309521188288428236024251993839560087229636799779157903650823700424848036276986652311165197569877428810358366358203174595667453056843209344115949077094799081260298678936223331932826351
e = 65535
c = 72186625991702159773441286864850566837138114624570350089877959520356759693054091827950124758916323653021925443200239303328819702117245200182521971965172749321771266746783797202515535351816124885833031875091162736190721470393029924557370228547165074694258453101355875242872797209141366404264775972151904835111


inputs = [1]*9
inputs[2] = 0  # i3 = 0
inputs[6] = 0  # i7 = 0
inputs[8] = 0  # i9 = 0

# use pwntools to automatically send the input and read the output
# it's probably faster to do this manually :/
from pwn import *

# context.log_level='debug'

proc = remote("determined.chal.uiuc.tf", 1337, ssl=True)

for i in inputs:
    toSend = str(i).encode()
    proc.sendlineafter(b' = ', toSend)

proc.recvuntil(b'[DET] Have fun: ')
q = int(proc.recvline().strip())


p = n // q
assert p * q == n, "Invalid q!!!"


# typical RSA decryption when p and q are known
phi = (p-1)*(q-1)
d = pow(e,-1,phi)
m = pow(c,d,n)

from Crypto.Util.number import long_to_bytes
print(long_to_bytes(m).decode())

# uiuctf{h4rd_w0rk_&&_d3t3rm1n4t10n}