# from gen.txt
n = 158794636700752922781275926476194117856757725604680390949164778150869764326023702391967976086363365534718230514141547968577753309521188288428236024251993839560087229636799779157903650823700424848036276986652311165197569877428810358366358203174595667453056843209344115949077094799081260298678936223331932826351
e = 65535
c = 72186625991702159773441286864850566837138114624570350089877959520356759693054091827950124758916323653021925443200239303328819702117245200182521971965172749321771266746783797202515535351816124885833031875091162736190721470393029924557370228547165074694258453101355875242872797209141366404264775972151904835111


# outputs of $ ncat --ssl determined.chal.uiuc.tf 1337
# all ones
out1 = 69143703864818353130371867063903344721913499237213762852365448402106351546379534901008421404055139746270928626550203483668654060066917995961156948563756758160310602854329852071039981874388564191274850542349182490083881348633205451737697677971069061869428981062350490771144358405734467651517359001029442068348

# all ones except first input is 2
out2 = 69143703864818353130371867063903344721913499237213762852365448402106351546379534901008421404055139746270928626550203483668654060066917995961156948563756752700538511697695076762773965531010748006659492973112024174525746367374237063293523650725957257590333321191693876781172827116596771133374732236966118301362

# all ones except third input is 2
out3 = -20507228971116216520532192348387428412930727130252865244433881346657061233264632589951133278253086042176373261041141001240445189387352296505922127124480310700616103779947395254171594969854050256012376773564149098369780795085927063724185033941229309990221008472272741624740684057095906609100892782375305854526



# solve simultaneous equations with sympy
from sympy import Eq, solve, symbols

p, q, r = symbols('p q r')

eq1 = Eq(out1, p*q - p*r - q + r)
eq2 = Eq(out2, p*q - p*r - 2*q + 2*r)
eq3 = Eq(out3, p*q - 2*p*r - q + 2*r)

sols = solve((eq1, eq2, eq3), p, q, r)[0]
p = int(sols[0])
q = int(sols[1])



# typical RSA decryption when p and q are known
phi = (p-1)*(q-1)
d = pow(e,-1,phi)
m = pow(c,d,n)

from Crypto.Util.number import long_to_bytes
print(long_to_bytes(m).decode())